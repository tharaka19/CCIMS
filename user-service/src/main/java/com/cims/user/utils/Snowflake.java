package com.cims.user.utils;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Snowflake is a class for generating unique IDs based on Twitter's Snowflake algorithm.
 * Each generated ID is composed of a timestamp and a sequence number, which guarantees that
 * IDs generated by different machines at the same time will be unique.
 */
public class Snowflake {
    private static final long EPOC_OFFSET = (10L * 1461L * 24L * 60L * 60L * 1000L);
    private final Logger LOG = LoggerFactory.getLogger(Snowflake.class);
    private long sequence = 0L;

    private long lastTimestamp = -1L;

    public Snowflake() {
    }

    /**
     * Generates a new Snowflake ID.
     *
     * @return a long value representing the Snowflake ID.
     * @throws RuntimeException if the clock moves backwards, which could result in non-unique IDs.
     */
    public synchronized long newId() {
        long timestamp = System.currentTimeMillis();
        long id = (timestamp - EPOC_OFFSET);
        if (timestamp < this.lastTimestamp) {
            LOG.error("Clock is moving backwards.  Rejecting requests until: " + this.lastTimestamp);
            throw new RuntimeException(String.format("Clock moved backwards.  Refusing to generate id for %d milliseconds", Long.valueOf(this.lastTimestamp - timestamp)));
        } else {
            if (timestamp > lastTimestamp || (this.sequence & 4096) > 0) this.sequence = 0;
            id <<= 12;
            id |= sequence;
            this.sequence++;
            this.lastTimestamp = timestamp;
            return (id);
        }
    }
}
